//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "Views\ServiceOperationView.xaml.h"

void ::BackgroundHost::Headed::Views::ServiceOperationView::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///BackgroundHost.Headed/Views/ServiceOperationView.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Nested);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class BackgroundHost::Headed::Views::ServiceOperationView::ServiceOperationView_obj1_Bindings 
    : public ::XamlBindingInfo::XamlBindingsBase<::BackgroundHost::Headed::Views::ServiceOperationView>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    ServiceOperationView_obj1_Bindings()
    {
        InitializeTracking(this);
    }

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 2:
                this->obj2 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 3:
                this->obj3 = safe_cast<::Windows::UI::Xaml::Controls::ProgressBar^>(__target);
                break;
            case 4:
                this->obj4 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
            case 5:
                this->obj5 = safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(__target);
                break;
            case 6:
                this->obj6 = safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(__target);
                break;
            case 7:
                this->obj7 = safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(__target);
                break;
        }
    }
            void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
            {
                this->converterLookupRoot = rootElement;
            }

            ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
            {
                if (this->localResources == nullptr)
                {
                    this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
                    this->converterLookupRoot = nullptr;
                }
                return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
            }

private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::TextBlock^ obj2;
    ::Windows::UI::Xaml::Controls::ProgressBar^ obj3;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj4;
    ::Windows::UI::Xaml::Controls::AppBarButton^ obj5;
    ::Windows::UI::Xaml::Controls::AppBarButton^ obj6;
    ::Windows::UI::Xaml::Controls::AppBarButton^ obj7;
    
    // Fields for binding tracking.
    ::Windows::UI::Xaml::Data::INotifyPropertyChanged^ cachePC_ViewModel = nullptr;
    ::Windows::Foundation::EventRegistrationToken tokenPC_ViewModel;

    // Update methods for each path node used in binding steps.
    void Update_(::BackgroundHost::Headed::Views::ServiceOperationView^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_ApplicationDisplayTitle(obj->ApplicationDisplayTitle, phase);
            }
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_ViewModel(obj->ViewModel, phase);
            }
        }
    }
    void Update_ApplicationDisplayTitle(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj2, obj, nullptr);
        }
    }
    void Update_ViewModel(::BackgroundHost::Headed::ViewModels::ServiceOperationViewModel^ obj, int phase)
    {
					this->_bindingsTracking->UpdatePropertyChangedListener(obj, &this->cachePC_ViewModel, &tokenPC_ViewModel);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_ViewModel_IsInProgress(obj->IsInProgress, phase);
                this->Update_ViewModel_StatusText(obj->StatusText, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_ViewModel_StartCommand(obj->StartCommand, phase);
                this->Update_ViewModel_StopCommand(obj->StopCommand, phase);
                this->Update_ViewModel_RestartCommand(obj->RestartCommand, phase);
            }
        }
    }
    void Update_ViewModel_IsInProgress(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_UIElement_Opacity(this->obj3, safe_cast<::default::float64>(this->LookupConverter("BooleanToOpacityConverter")->Convert(obj, ::default::float64::typeid, nullptr, nullptr)));
        }
    }
    void Update_ViewModel_StatusText(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj4, obj, nullptr);
        }
    }
    void Update_ViewModel_StartCommand(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj5, obj, nullptr);
        }
    }
    void Update_ViewModel_StopCommand(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj6, obj, nullptr);
        }
    }
    void Update_ViewModel_RestartCommand(::Windows::UI::Xaml::Input::ICommand^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this->obj7, obj, nullptr);
        }
    }

    virtual void ReleaseAllListeners() override
    {
					this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, &this->cachePC_ViewModel, &tokenPC_ViewModel);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (cachePC_ViewModel != nullptr && cachePC_ViewModel->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::BackgroundHost::Headed::ViewModels::ServiceOperationViewModel^ obj = safe_cast<::BackgroundHost::Headed::ViewModels::ServiceOperationViewModel^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_IsInProgress(obj->IsInProgress, DATA_CHANGED);
                    this->Update_ViewModel_StatusText(obj->StatusText, DATA_CHANGED);
                }
            }
            else if (propName == "IsInProgress")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_IsInProgress(obj->IsInProgress, DATA_CHANGED);
                }
            }
            else if (propName == "StatusText")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_StatusText(obj->StatusText, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
};

void ::BackgroundHost::Headed::Views::ServiceOperationView::Connect(int __connectionId, ::Platform::Object^ __target)
{
    __connectionId;         // unreferenced 
    __target;               // unreferenced
    _contentLoaded = true;
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::BackgroundHost::Headed::Views::ServiceOperationView::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 1:
            {
                ::Windows::UI::Xaml::Controls::UserControl^ element1 = safe_cast<::Windows::UI::Xaml::Controls::UserControl^>(__target);
                ServiceOperationView_obj1_Bindings* objBindings = new ServiceOperationView_obj1_Bindings();
                objBindings->SetDataRoot(this);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                this->Bindings = bindings;
                element1->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(bindings, &::XamlBindingInfo::XamlBindings::Loading);
            }
            break;
    }
    return bindings;
}


